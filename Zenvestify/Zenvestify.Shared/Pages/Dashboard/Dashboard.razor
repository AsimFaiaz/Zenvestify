@page "/dashboard"
@using System.IdentityModel.Tokens.Jwt
@using System.Security.Claims
@using Microsoft.IdentityModel.JsonWebTokens
@using System.Net.Http.Json
@using Microsoft.JSInterop
@using Zenvestify.Shared.Layout
@using System.ComponentModel.DataAnnotations
@using System.Globalization
@using static Zenvestify.Shared.Models.UserProfileDtos
@layout MainLayout
@inject NavigationManager Nav
@inject HttpClient Http
@inject IJSRuntime JS
@inject Zenvestify.Shared.Services.AuthService Auth
@inject Zenvestify.Shared.Services.UserProfileService ProfileService

<div class="dashboard">
    <div class="dash-header">
        <h2>@Greeting, @FullName 👋</h2>
    </div>

    @if (ShowOnboarding)
    {
        <Onboarding Show="@ShowOnboarding" />
    }
    else
    {
        <!-- GRID LAYOUT -->
        <section class="dashboard-grid">
            <!-- KPIs -->
            <div class="card"><header>Income</header><div class="value">@IncomeThisCycle.ToString("C0")</div><canvas id="sparkIncome"></canvas></div>
            <div class="card"><header>Expenses</header><div class="value">@ExpensesThisCycle.ToString("C0")</div><canvas id="sparkExpense"></canvas></div>
            <div class="card"><header>Savings</header><div class="value">@($"{SavingsProgress:P0}")</div><canvas id="sparkSavings"></canvas></div>
            <div class="card"><header>Tax Paid</header><div class="value">@TaxPaidYTD.ToString("C0")</div><canvas id="sparkTax"></canvas></div>

            <!-- Mid charts -->
            <div class="card span-2">
                <header>Spending Categories</header>
                <canvas id="pieCategories"></canvas>
            </div>

            <div class="card">
                <header>Upcoming Bills</header>
                <ul class="bills">
                    @if (UpcomingBills.Any())
                    {
                        @foreach (var bill in UpcomingBills)
                        {
                            <li><b>@bill.Name</b><span>@bill.Amount.ToString("C0")</span><em>@((bill.FirstDueDate - DateTime.Now).Days)d</em></li>
                        }
                    }
                    else
                    {
                        <li><em>No upcoming bills</em></li>
                    }
                </ul>
            </div>

            <div class="card">
                <header>Recent Activity</header>
                <ul class="history">
                    @if (RecentActivity.Any())
                    {
                        @foreach (var act in RecentActivity)
                        {
                            <li><span class="pill @(act.TypeCss)">@act.Type</span> @act.Description</li>
                        }
                    }
                    else
                    {
                        <li><em>No recent activity</em></li>
                    }
                </ul>
            </div>

            <!-- Bottom wide chart -->
            <div class="card span-4">
                <header>Cash Flow (Income vs Expenses)</header>
                <canvas id="trendIncomeExpense"></canvas>
            </div>
        </section>
    }
</div>

@code {
    private string FullName = "there";
    private string Greeting = "Hello";
    private bool ShowOnboarding { get; set; } = false;

    // KPI values
    private decimal IncomeThisCycle;
    private decimal ExpensesThisCycle;
    private decimal SavingsProgress;
    private decimal TaxPaidYTD;

    // Data for JS charts
    private List<decimal> IncomeHistory = new();
    private List<decimal> ExpenseHistory = new();
    private List<string> Labels = new();
    private List<decimal> CategoryBreakdown = new();

    // Bills + Activity
    private List<BillDto> UpcomingBills = new();
    private List<ActivityItem> RecentActivity = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await Auth.WhenReady;

            var response = await Auth.GetMeAsync();

            if (!response.IsSuccessStatusCode)
            {
                var body = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"[Dashboard] ERROR Body={body}");
                return;
            }

            var user = await response.Content.ReadFromJsonAsync<UserDto>();
            if (user == null) return;

            if (!string.IsNullOrWhiteSpace(user.FullName))
                FullName = user.FullName.Split(' ')[0];

            if (user.OnboardingStatus != 2)
            {
                ShowOnboarding = true;
                return;
            }

            // Load KPI data
            var income = await ProfileService.GetIncomeAsync();
            IncomeThisCycle = income?.NetPayPerCycle ?? income?.GrossPayPerCycle ?? 0;

            var expenses = await ProfileService.GetExpensesAsync(DateTime.Now.AddMonths(-1), DateTime.Now);
            ExpensesThisCycle = expenses?.Sum(e => e.Amount) ?? 0;

            var savings = await ProfileService.GetSavingsGoalsAsync();
            if (savings != null && savings.Count > 0)
            {
                var totalTarget = savings.Sum(g => g.TargetAmount);
                var totalSaved = savings.Sum(g => g.AmountSavedToDate ?? 0);
                SavingsProgress = totalTarget > 0 ? totalSaved / totalTarget : 0;
            }

            var tax = await ProfileService.GetTaxSettingsAsync();
            TaxPaidYTD = tax?.TaxWithheldPerCycle ?? 0; // extend later

            // Build chart data (dummy logic → extend later with DB query grouping)
            IncomeHistory = new() { IncomeThisCycle, IncomeThisCycle, IncomeThisCycle, IncomeThisCycle };
            ExpenseHistory = new() { ExpensesThisCycle, ExpensesThisCycle, ExpensesThisCycle, ExpensesThisCycle };
            Labels = new() { "W1", "W2", "W3", "W4" };
            CategoryBreakdown = new() { ExpensesThisCycle * 0.4m, ExpensesThisCycle * 0.2m, ExpensesThisCycle * 0.3m, ExpensesThisCycle * 0.1m };

            // Bills
            var bills = await ProfileService.GetBillsAsync();
            if (bills != null) UpcomingBills = bills.OrderBy(b => b.FirstDueDate).Take(4).ToList();

            // Recent activity (demo: map expenses + income)
            if (expenses != null)
            {
                RecentActivity = expenses.OrderByDescending(e => e.DateSpent).Take(5).Select(e => new ActivityItem
                {
                    Type = "Expense",
                    TypeCss = "neutral",
                    Description = $"{e.Category} -{e.Amount:C0}"
                }).ToList();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("[Dashboard] ERROR " + ex.Message);
        }

        var hour = DateTime.Now.Hour;
        Greeting = hour switch
        {
            >= 5 and < 12 => "Good morning",
            >= 12 and < 18 => "Good afternoon",
            _ => "Good evening"
        };
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !ShowOnboarding)
        {
            await JS.InvokeVoidAsync("ZvCharts.initAllDynamic", IncomeHistory, ExpenseHistory, Labels, CategoryBreakdown);
        }
    }

    private class UserDto
    {
        public string Id { get; set; } = "";
        public string FullName { get; set; } = "";
        public string Email { get; set; } = "";
        public int OnboardingStatus { get; set; } = 0;
    }

    private class ActivityItem
    {
        public string Type { get; set; } = "";
        public string TypeCss { get; set; } = "";
        public string Description { get; set; } = "";
    }
}

<script src="_content/Zenvestify.Shared/js/dashboard.js"></script>
