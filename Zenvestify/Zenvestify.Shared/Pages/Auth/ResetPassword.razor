@page "/resetpassword"
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components.Forms
@using Zenvestify.Shared.Layout
@layout NotLoggedInLayout
@inject NavigationManager Nav
@inject Zenvestify.Shared.Services.AuthService Auth

<EditForm FormName="resetForm" Model="_vm" OnValidSubmit="Submit">
    <DataAnnotationsValidator />

    <div class="reset-container">
      <div class="card reset-card text-center p-4">
        <h3>Create a new password</h3>

       <p class="text-muted">Enter your new password</p>

        <div class="card p-4">
            <div class="mb-3">
                <label class="form-label d-flex justify-content-start">New password</label>
                <InputText type="password" class="form-control" @bind-Value="_vm.Password" />
            </div>
            <div class="mb-3">
                 <label class="form-label d-flex justify-content-start">Confirm password</label>
                <InputText type="password" class="form-control" @bind-Value="_vm.Confirm" />
            </div>

            @if (!string.IsNullOrWhiteSpace(_error))
            {
                <div class="alert alert-danger py-2 mb-3">@_error</div>
            }

            <button type="submit" class="btn btn-primary w-100" disabled="@_busy">
                @(_busy ? "Updating..." : "Update Password")
            </button>

        </div>
      </div>
    </div>

 </EditForm>

@code {
    private ResetVm _vm = new();
    private string _token => System.Web.HttpUtility.ParseQueryString(new Uri(Nav.Uri).Query)["token"] ?? "";
    private string? _error;
    private bool _busy;

    private async Task Submit()
    {
        if (_vm.Password != _vm.Confirm) return;

        _busy = true;
        StateHasChanged();

        var (ok, err) = await Auth.ResetPasswordAsync(_token, _vm.Password);


        _busy = false;

        if (ok)
        {
            Nav.NavigateTo("/login", forceLoad: true);
        }

        else
        {
            _error = string.IsNullOrWhiteSpace(err) ? "Reset failed" : err;
        }
    }

    class ResetVm
    {
        [Required, MinLength(8)]
        [Display(Name = "Password")]
        public string Password { get; set; } = "";

        [Required, MinLength(8), Compare(nameof(Password), ErrorMessage = "Passwords did not match")]
        [Display(Name = "Confirm Password")]
        public string Confirm { get; set; } = "";
    }
}

