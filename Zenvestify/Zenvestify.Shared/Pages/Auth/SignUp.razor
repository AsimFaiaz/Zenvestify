@page "/signup"
@using Zenvestify.Shared.Layout
@using System.ComponentModel.DataAnnotations
@layout NotLoggedInLayout
@inject NavigationManager Nav
@inject Zenvestify.Shared.Services.AuthService Auth

<EditForm FormName="signupForm" Model="_vm" OnValidSubmit="HandleSubmit">
    <DataAnnotationsValidator />

    <div class="signup-container">
      <div class="card signup-card text-center p-4">
        <h3 class="mb-3">Create your account</h3>
        <div class="card p-4">

            <div class="mb-3">
                 <label class="form-label d-flex justify-content-start">Full name</label>
                <InputText class="form-control" @bind-Value="_vm.FullName" />
                <ValidationMessage For="@(() => _vm.FullName)" />
            </div>

            <div class="mb-3">
                <label class="form-label d-flex justify-content-start">Email</label>
                <InputText type="email" class="form-control" @bind-Value="_vm.Email" />
                <ValidationMessage For="@(() => _vm.Email)" />
            </div>

            <div class="mb-3">
                <label class="form-label  d-flex justify-content-start">Password</label>
                <InputText type="password" class="form-control" @bind-Value="_vm.Password" />
                <ValidationMessage For="@(() => _vm.Password)" />
            </div>

            <div class="mb-3">
                 <label class="form-label  d-flex justify-content-start">Confirm password</label>
                <InputText type="password" class="form-control" @bind-Value="_vm.ConfirmPassword" />
                <ValidationMessage For="@(() => _vm.ConfirmPassword)" />
            </div>

            @if(!string.IsNullOrWhiteSpace(_error))
            {
                <div class="alert alert-danger py-2 mb-3">@_error</div>
            }

                <button type="submit" class="btn btn-primary w-100" disabled="@_busy">
                @(_busy ? "Creating..." : "Create account")
            </button>

            <div class="text-muted mt-3 text-center">
                Already have an account? <a href="/login">Log in</a>
            </div>
        </div>
    </div>
</div>
</EditForm>


@code {
    private readonly SignupVm _vm = new();
    private bool _busy;
    private string? _error;

    private async Task HandleSubmit()
    {
        _error = null;
        _busy = true;

        try
        {
            var (ok, err) = await Auth.RegisterAsync(_vm.FullName, _vm.Email, _vm.Password);
            if (ok)
            {
                // after signup, send to login to get a token
                Nav.NavigateTo("/login", forceLoad: true);
            }
            else
            {
                _error = string.IsNullOrWhiteSpace(err) ? "Registration failed. Please try again." : err;
            }
        }
        catch (Exception ex)
        {
            _error = $"Registration error: {ex.Message}";
        }
        finally
        {
            _busy = false;
        }
    }

    public class SignupVm
    {
        //TODO: CHANGE MIN LENGTH TO 2
        [Required, MinLength(1)]
        [Display(Name = "Full Name")]
        public string FullName { get; set; } = "";

        [Required, EmailAddress]
        [Display(Name = "Email Address")]
        public string Email { get; set; } = "";

        //TODO: CHANGE MIN LENGTH TO 8
        [Required, MinLength(1)]
        public string Password { get; set; } = "";

        [Required, MinLength(1), Compare(nameof(Password), ErrorMessage = "Passwords did not match")]
        [Display(Name = "Confirm Password")]
        public string ConfirmPassword { get; set; } = "";
    }
}
